{
    "Pass": [
        {
            "Ausl": "a1",
            "BlendMode": "FromShader",
            "ClearType": "Dont",
            "ColorWrite": "RGBA",
            "Cull": "Back",
            "DepthTestEnable": "On",
            "DepthWriteEnable": "Off",
            "FullScreenShading": "Off",
            "PassType": "Normal",
            "UseCameraRT": "Off",
            "UseFBOFetch": "Off",
            "UseFBOTexture": "On",
            "ZTest": "LessEqual"
        }
    ],
    "Shader": "Lut"
}
---ENDJSON

---BEGIN UIPROPERTY

    $Lut$
    _Intensity (Intensity, Range(0.000000, 1.000000)) = 1.000000
    _BaseTexture (Texture, 2D) = "Default_Material_Texture_BrightLut"

---END UIPROPERTY

---BEGIN a1
#version 300 es

#pragma only_renderers glsl30 metal

// Attributes: attributes in vertex shader
#pragma input attributes
    in vec3 attPosition;
    in vec2 attTexcoord0;
#pragma end

#pragma output targets
    out highp vec4 o_FragColor;
#pragma end

#pragma varying varyings
    highp vec2 uv0;
#pragma end

#pragma vs attributes varyings
    precision highp float;
    uniform mat4 u_MVP;
#pragma end

#pragma fs varyings targets
precision highp float;
uniform sampler2D u_FBOTexture;
#define inputTexture0 u_FBOTexture

uniform float _Intensity;
uniform sampler2D _BaseTexture;
#pragma end

void vertex(){
    gl_Position = sign(vec4(attPosition, 1.0));
    uv0 = attTexcoord0;
}

void fragment(){
    vec4 color = texture(inputTexture0, uv0);

    highp float blueColor = color.b * 63.0;
    highp vec2 quad1;
    quad1.y = floor(floor(blueColor) / 8.0);
    quad1.x = floor(blueColor) - (quad1.y * 8.0);
    highp vec2 texPos1;
    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);
    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);
    lowp vec4 newColor = texture(_BaseTexture, texPos1);
    color = mix(color, newColor, _Intensity);

    o_FragColor = color; 
}
---END a1

{
	"Shader":"FacePaint",
	"Pass":
	[
		{
			"Ausl":"a1",
			"BlendMode":"Transparent",
			"ColorWrite":"RGBA",
			"Cull":"Back",
			"FullScreenShading":"Off",
			"DepthTestEnable":"On",
			"ZTest":"LessEqual",
			"DepthWriteEnable":"On",
			"UseFBOFetch":"Off",
			"PassType":"Normal",
			"UseFBOTexture":"Off",
			"UseCameraRT":"Off",
			"ClearType":"Dont"
		}
	]
}
---ENDJSON

---BEGIN UIPROPERTY

    $Base property$
    _BaseTexture (Texture, 2D) = "Default_Material_Texture_Icon"
    _BaseColor (Tint color, Color) = [1.000000, 1.000000, 1.000000, 1.000000]
    PremultOn (Premult On, Defs) = 1

    $UV control$
    UvControl (UV control, Defs) = 0
    [UvControl] _Tiling (Tilling, Vec2) = [1.000000, 1.000000]
    [UvControl] _Offset (Offset, Vec2) = [0.000000, 0.000000]
    [UvControl] _Rotation (Rotation, Range(0.000000, 360.000000)) = 0.000000

---END UIPROPERTY

---BEGIN a1

    #version 300 es
    #pragma only_renderers glsl30 metal

    // Attributes: attributes in vertex shader
    #pragma input attributes
        in vec3 attPosition;
        in vec2 attTexcoord0;
        in vec3 attNormal;
    #pragma end

    // Varyings: outputs of vertex shader, inputs for fragment shader
    #pragma varying varyings
        highp vec2 g_vary_uv0;
        highp vec4 v_sampling_pos;
        highp vec4 v_background_pos;
        highp vec3 v_worldPos;
        highp vec3 v_Normal;
    #pragma end

    // Output: output targets in fragment shader
    #pragma output targets
        out highp vec4 o_fragColor;
    #pragma end

    // Vertex stage section in vertex shader
    #pragma vs attributes varyings
        precision highp float;
        uniform mat4 u_Model;
        uniform mat4 u_MVP;
        uniform mat4 u_TransposeInvModel;
    #pragma end

    // Fragment stage section in fragment shader
    #pragma fs varyings targets
        precision highp float;
        uniform vec4 u_WorldSpaceCameraPos;
        uniform vec4 _BaseColor;
        uniform sampler2D _BaseTexture;

        #ifdef UvControl
            #define D2R 0.01745329251

            uniform vec2 _Tiling;
            uniform vec2 _Offset;
            uniform float _Rotation;

            vec2 UV_TRS(vec2 inputUV, vec2 uvCenter, vec2 uvPan, vec2 uvScale, float uvRotate)
            {
                vec2 minusCenterUV = inputUV - uvCenter;
                float cosVal = cos(uvRotate);
                float sinVal = sin(uvRotate);
                mat2 rotateMat = mat2(cosVal, -sinVal, sinVal, cosVal);
                
                vec2 outputUV = minusCenterUV * uvScale;
                outputUV = rotateMat * outputUV + uvCenter;
                outputUV = outputUV + uvPan;
                return outputUV;
            }
        #endif
    #pragma end

    // Entry function in vertex shader, must match "void vertex()"
    void vertex()
    {
        vec3 modelPostiton = attPosition;
        vec4 homogeneous_modelPostiton = vec4(modelPostiton, 1.0);

        vec4 homogeneous_pos = vec4(attPosition, 1.0); // + vec4(0.0, 0.0, 10.0, 0.0); 
        // homogeneous_pos.xyz *= vec3(u_Scale);
        // float cosAngle = cos(u_RotateZ);
        // float sinAngle = sin(u_RotateZ);
        // mat3 rotation = mat3(cosAngle, 0.0, -sinAngle, 0.0, 1.0, 0.0, sinAngle, 0.0, cosAngle);
        // homogeneous_pos.xyz *= rotation;

        g_vary_uv0 = attTexcoord0;

        gl_Position = u_MVP * homogeneous_pos;

        v_worldPos = homogeneous_pos.xyz;
        v_Normal = mat3(u_TransposeInvModel) * attNormal; // * rotation;

        v_sampling_pos = u_MVP * homogeneous_modelPostiton;
        v_background_pos = u_MVP * homogeneous_pos;
    }

    // Entry function in fragment shader, must match "void fragment()"
    void fragment()
    {
        vec2 uv = g_vary_uv0;
        uv.y = 1.0 - uv.y;
        
        #ifdef UvControl
            uv = UV_TRS(uv.xy, vec2(0.5, 0.5), _Offset, _Tiling, _Rotation * D2R);
        #endif

        vec4 texColor = texture(_BaseTexture, uv) * _BaseColor;

        #ifdef PremultOn
            texColor.rgb = texColor.rgb / texColor.a;
        #endif

        o_fragColor = texColor;
    }

---END a1
